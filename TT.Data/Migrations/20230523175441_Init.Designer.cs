// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TT.Data.DbContexts;

#nullable disable

namespace TT.Data.Migrations
{
    [DbContext(typeof(TestTaskDbContext))]
    [Migration("20230523175441_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("test_task")
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TT.Data.Entities.Query", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid>("SearchId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SearchId")
                        .IsUnique();

                    b.ToTable("Queries", "test_task");
                });

            modelBuilder.Entity("TT.Data.Entities.Route", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DestinationDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("OriginDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("SearchResultId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("TimeLimit")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SearchResultId");

                    b.HasIndex("Origin", "Destination", "OriginDateTime");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("Origin", "Destination", "OriginDateTime"), new[] { "DestinationDateTime", "Price", "TimeLimit" });

                    b.ToTable("Routes", "test_task");
                });

            modelBuilder.Entity("TT.Data.Entities.Search", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("SearchState")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Searches", "test_task");
                });

            modelBuilder.Entity("TT.Data.Entities.SearchResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ProviderId")
                        .HasColumnType("integer");

                    b.Property<Guid>("SearchId")
                        .HasColumnType("uuid");

                    b.Property<string>("SearchResultState")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SearchId");

                    b.ToTable("SearchResults", "test_task");
                });

            modelBuilder.Entity("TT.Data.Entities.Query", b =>
                {
                    b.HasOne("TT.Data.Entities.Search", "Search")
                        .WithOne("Query")
                        .HasForeignKey("TT.Data.Entities.Query", "SearchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Search");
                });

            modelBuilder.Entity("TT.Data.Entities.Route", b =>
                {
                    b.HasOne("TT.Data.Entities.SearchResult", "SearchResult")
                        .WithMany("Routes")
                        .HasForeignKey("SearchResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SearchResult");
                });

            modelBuilder.Entity("TT.Data.Entities.SearchResult", b =>
                {
                    b.HasOne("TT.Data.Entities.Search", "Search")
                        .WithMany("SearchResults")
                        .HasForeignKey("SearchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Search");
                });

            modelBuilder.Entity("TT.Data.Entities.Search", b =>
                {
                    b.Navigation("Query")
                        .IsRequired();

                    b.Navigation("SearchResults");
                });

            modelBuilder.Entity("TT.Data.Entities.SearchResult", b =>
                {
                    b.Navigation("Routes");
                });
#pragma warning restore 612, 618
        }
    }
}
